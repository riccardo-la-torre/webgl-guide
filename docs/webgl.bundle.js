/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./earth/index.js":
/*!************************!*\
  !*** ./earth/index.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"main\": () => (/* binding */ main)\n/* harmony export */ });\n/* harmony import */ var _earth_vert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./earth.vert */ \"./earth/earth.vert\");\n/* harmony import */ var _earth_frag__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./earth.frag */ \"./earth/earth.frag\");\n/* harmony import */ var _earth_jpg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./earth.jpg */ \"./earth/earth.jpg\");\n\r\n\r\n\r\n\r\nfunction calcSphereVertexAttribs(hAngle, vAngle, point) {\r\n  const attribs = [];\r\n  attribs.push(...point.elements); // vertex\r\n  point.normalize();\r\n  attribs.push(...point.elements); // normal\r\n  attribs.push(hAngle / 360, 1 - vAngle / 180); // tex coords\r\n  return attribs;\r\n}\r\n\r\nfunction generateSphereGeometry(precision, radius) {\r\n  const angleStep = 180 / precision;\r\n  const attribs = [];\r\n  const transform = new Matrix4();\r\n  const topVertex = new Vector3([0, radius, 0]);\r\n  const bottomVertex = new Vector3([0, -radius, 0]);\r\n  let down = true;\r\n  for (let hAngle = 0; hAngle < 360; hAngle += angleStep) {\r\n    for (\r\n      let vAngle = down ? 0 : 180;\r\n      down ? vAngle < 180 : vAngle > 0;\r\n      vAngle += (down ? 1 : -1) * angleStep\r\n    ) {\r\n      if (vAngle <= 0) {\r\n        attribs.push(...calcSphereVertexAttribs(hAngle, 0, topVertex));\r\n      } else if (vAngle >= 180) {\r\n        attribs.push(...calcSphereVertexAttribs(hAngle, 180, bottomVertex));\r\n      } else {\r\n        transform.setRotate(hAngle, 0, -1, 0);\r\n        transform.rotate(vAngle, -1, 0, 0);\r\n        const point1 = transform.multiplyVector3(topVertex);\r\n        attribs.push(...calcSphereVertexAttribs(hAngle, vAngle, point1));\r\n        transform.setRotate(hAngle + angleStep, 0, -1, 0);\r\n        transform.rotate(vAngle, -1, 0, 0);\r\n        const point2 = transform.multiplyVector3(topVertex);\r\n        attribs.push(\r\n          ...calcSphereVertexAttribs(hAngle + angleStep, vAngle, point2)\r\n        );\r\n      }\r\n    }\r\n    down = !down;\r\n  }\r\n  return new Float32Array(attribs);\r\n}\r\n\r\nlet rotationAngle = 0;\r\nconst degreeXSecond = 10;\r\nlet time = Date.now();\r\nconst modelMatrix = new Matrix4();\r\nlet u_ModelMatrix;\r\nlet gl;\r\nlet n;\r\n\r\nfunction main() {\r\n  // Retrieve <canvas> element\r\n  var canvas = document.getElementById(\"webgl\");\r\n\r\n  // Get the rendering context for WebGL\r\n  gl = getWebGLContext(canvas);\r\n  if (!gl) {\r\n    console.log(\"Failed to get the rendering context for WebGL\");\r\n    return;\r\n  }\r\n\r\n  gl.enable(gl.DEPTH_TEST);\r\n\r\n  // Initialize shaders\r\n  if (!initShaders(gl, _earth_vert__WEBPACK_IMPORTED_MODULE_0__, _earth_frag__WEBPACK_IMPORTED_MODULE_1__)) {\r\n    console.log(\"Failed to intialize shaders.\");\r\n    return;\r\n  }\r\n\r\n  u_ModelMatrix = gl.getUniformLocation(gl.program, \"u_ModelMatrix\");\r\n  if (!u_ModelMatrix) {\r\n    console.log(\"Failed to get the storage location of u_ModelMatrix\");\r\n    return;\r\n  }\r\n\r\n  // Set the vertex information\r\n  n = initVertexBuffers();\r\n  if (n < 0) {\r\n    console.log(\"Failed to set the vertex information\");\r\n    return;\r\n  }\r\n\r\n  // Specify the color for clearing <canvas>\r\n  gl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n\r\n  // Set texture\r\n  if (!initTextures()) {\r\n    console.log(\"Failed to intialize the texture.\");\r\n    return;\r\n  }\r\n}\r\n\r\nfunction initVertexBuffers() {\r\n  var vertexData = generateSphereGeometry(30, 1);\r\n  n = Math.round(vertexData.length / 8); // The number of vertices\r\n\r\n  // Create the buffer object\r\n  var vertexDataBuffer = gl.createBuffer();\r\n  if (!vertexDataBuffer) {\r\n    console.log(\"Failed to create the buffer object\");\r\n    return -1;\r\n  }\r\n\r\n  // Bind the buffer object to target\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, vertexDataBuffer);\r\n  gl.bufferData(gl.ARRAY_BUFFER, vertexData, gl.STATIC_DRAW);\r\n\r\n  var FSIZE = vertexData.BYTES_PER_ELEMENT;\r\n  //Get the storage location of a_Position, assign and enable buffer\r\n  var a_Position = gl.getAttribLocation(gl.program, \"a_Position\");\r\n  if (a_Position < 0) {\r\n    console.log(\"Failed to get the storage location of a_Position\");\r\n    return -1;\r\n  }\r\n  gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, FSIZE * 8, 0);\r\n  gl.enableVertexAttribArray(a_Position); // Enable the assignment of the buffer object\r\n\r\n  // Get the storage location of a_TexCoord\r\n  var a_TexCoord = gl.getAttribLocation(gl.program, \"a_TexCoord\");\r\n  if (a_TexCoord < 0) {\r\n    console.log(\"Failed to get the storage location of a_TexCoord\");\r\n    return -1;\r\n  }\r\n  // Assign the buffer object to a_TexCoord variable\r\n  gl.vertexAttribPointer(a_TexCoord, 2, gl.FLOAT, false, FSIZE * 8, FSIZE * 6);\r\n  gl.enableVertexAttribArray(a_TexCoord); // Enable the assignment of the buffer object\r\n\r\n  return n;\r\n}\r\n\r\nfunction initTextures() {\r\n  var texture = gl.createTexture(); // Create a texture object\r\n  if (!texture) {\r\n    console.log(\"Failed to create the texture object\");\r\n    return false;\r\n  }\r\n\r\n  // Get the storage location of u_Sampler\r\n  var u_Sampler = gl.getUniformLocation(gl.program, \"u_Sampler\");\r\n  if (!u_Sampler) {\r\n    console.log(\"Failed to get the storage location of u_Sampler\");\r\n    return false;\r\n  }\r\n  var image = new Image(); // Create the image object\r\n  if (!image) {\r\n    console.log(\"Failed to create the image object\");\r\n    return false;\r\n  }\r\n  // Register the event handler to be called on loading an image\r\n  image.onload = function () {\r\n    loadTexture(texture, u_Sampler, image);\r\n  };\r\n  // Tell the browser to load an image\r\n  image.src = _earth_jpg__WEBPACK_IMPORTED_MODULE_2__;\r\n\r\n  return true;\r\n}\r\n\r\nfunction loadTexture(texture, u_Sampler, image) {\r\n  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1); // Flip the image's y axis\r\n  // Enable texture unit0\r\n  gl.activeTexture(gl.TEXTURE0);\r\n  // Bind the texture object to the target\r\n  gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n  // Set the texture parameters\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n  // Set the texture image\r\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image);\r\n\r\n  // Set the texture unit 0 to the sampler\r\n  gl.uniform1i(u_Sampler, 0);\r\n  tick();\r\n}\r\n\r\nfunction tick() {\r\n  const elapsedSeconds = (Date.now() - time) / 1000;\r\n  rotationAngle = (degreeXSecond * elapsedSeconds) % 360;\r\n  modelMatrix.setRotate(rotationAngle, 0, 1, 0);\r\n  gl.uniformMatrix4fv(u_ModelMatrix, false, modelMatrix.elements);\r\n  gl.clear(gl.COLOR_BUFFER_BIT); // Clear <canvas>\r\n\r\n  gl.drawArrays(gl.TRIANGLE_STRIP, 0, n); // Draw the rectangle\r\n  requestAnimationFrame(tick);\r\n}\r\n\n\n//# sourceURL=webpack://webgl-guide/./earth/index.js?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_webgl_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/webgl-utils.js */ \"./lib/webgl-utils.js\");\n/* harmony import */ var _lib_webgl_utils_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lib_webgl_utils_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lib_webgl_debug_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/webgl-debug.js */ \"./lib/webgl-debug.js\");\n/* harmony import */ var _lib_webgl_debug_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_lib_webgl_debug_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_cuon_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/cuon-utils.js */ \"./lib/cuon-utils.js\");\n/* harmony import */ var _lib_cuon_utils_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_lib_cuon_utils_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _lib_cuon_matrix_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/cuon-matrix.js */ \"./lib/cuon-matrix.js\");\n/* harmony import */ var _lib_cuon_matrix_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_lib_cuon_matrix_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _earth__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./earth */ \"./earth/index.js\");\n\n\n\n\n\n\n\n(0,_earth__WEBPACK_IMPORTED_MODULE_4__.main)();\n\n\n//# sourceURL=webpack://webgl-guide/./index.js?");

/***/ }),

/***/ "./lib/cuon-matrix.js":
/*!****************************!*\
  !*** ./lib/cuon-matrix.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("// cuon-matrix.js (c) 2012 kanda and matsuda\r\n/** \r\n * This is a class treating 4x4 matrix.\r\n * This class contains the function that is equivalent to OpenGL matrix stack.\r\n * The matrix after conversion is calculated by multiplying a conversion matrix from the right.\r\n * The matrix is replaced by the calculated result.\r\n */\r\n\r\n/**\r\n * Constructor of Matrix4\r\n * If opt_src is specified, new matrix is initialized by opt_src.\r\n * Otherwise, new matrix is initialized by identity matrix.\r\n * @param opt_src source matrix(option)\r\n */\r\nvar Matrix4 = function(opt_src) {\r\n  var i, s, d;\r\n  if (opt_src && typeof opt_src === 'object' && opt_src.hasOwnProperty('elements')) {\r\n    s = opt_src.elements;\r\n    d = new Float32Array(16);\r\n    for (i = 0; i < 16; ++i) {\r\n      d[i] = s[i];\r\n    }\r\n    this.elements = d;\r\n  } else {\r\n    this.elements = new Float32Array([1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1]);\r\n  }\r\n};\r\n\r\n/**\r\n * Set the identity matrix.\r\n * @return this\r\n */\r\nMatrix4.prototype.setIdentity = function() {\r\n  var e = this.elements;\r\n  e[0] = 1;   e[4] = 0;   e[8]  = 0;   e[12] = 0;\r\n  e[1] = 0;   e[5] = 1;   e[9]  = 0;   e[13] = 0;\r\n  e[2] = 0;   e[6] = 0;   e[10] = 1;   e[14] = 0;\r\n  e[3] = 0;   e[7] = 0;   e[11] = 0;   e[15] = 1;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Copy matrix.\r\n * @param src source matrix\r\n * @return this\r\n */\r\nMatrix4.prototype.set = function(src) {\r\n  var i, s, d;\r\n\r\n  s = src.elements;\r\n  d = this.elements;\r\n\r\n  if (s === d) {\r\n    return;\r\n  }\r\n    \r\n  for (i = 0; i < 16; ++i) {\r\n    d[i] = s[i];\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Multiply the matrix from the right.\r\n * @param other The multiply matrix\r\n * @return this\r\n */\r\nMatrix4.prototype.concat = function(other) {\r\n  var i, e, a, b, ai0, ai1, ai2, ai3;\r\n  \r\n  // Calculate e = a * b\r\n  e = this.elements;\r\n  a = this.elements;\r\n  b = other.elements;\r\n  \r\n  // If e equals b, copy b to temporary matrix.\r\n  if (e === b) {\r\n    b = new Float32Array(16);\r\n    for (i = 0; i < 16; ++i) {\r\n      b[i] = e[i];\r\n    }\r\n  }\r\n  \r\n  for (i = 0; i < 4; i++) {\r\n    ai0=a[i];  ai1=a[i+4];  ai2=a[i+8];  ai3=a[i+12];\r\n    e[i]    = ai0 * b[0]  + ai1 * b[1]  + ai2 * b[2]  + ai3 * b[3];\r\n    e[i+4]  = ai0 * b[4]  + ai1 * b[5]  + ai2 * b[6]  + ai3 * b[7];\r\n    e[i+8]  = ai0 * b[8]  + ai1 * b[9]  + ai2 * b[10] + ai3 * b[11];\r\n    e[i+12] = ai0 * b[12] + ai1 * b[13] + ai2 * b[14] + ai3 * b[15];\r\n  }\r\n  \r\n  return this;\r\n};\r\nMatrix4.prototype.multiply = Matrix4.prototype.concat;\r\n\r\n/**\r\n * Multiply the three-dimensional vector.\r\n * @param pos  The multiply vector\r\n * @return The result of multiplication(Float32Array)\r\n */\r\nMatrix4.prototype.multiplyVector3 = function(pos) {\r\n  var e = this.elements;\r\n  var p = pos.elements;\r\n  var v = new Vector3();\r\n  var result = v.elements;\r\n\r\n  result[0] = p[0] * e[0] + p[1] * e[4] + p[2] * e[ 8] + e[12];\r\n  result[1] = p[0] * e[1] + p[1] * e[5] + p[2] * e[ 9] + e[13];\r\n  result[2] = p[0] * e[2] + p[1] * e[6] + p[2] * e[10] + e[14];\r\n\r\n  return v;\r\n};\r\n\r\n/**\r\n * Multiply the four-dimensional vector.\r\n * @param pos  The multiply vector\r\n * @return The result of multiplication(Float32Array)\r\n */\r\nMatrix4.prototype.multiplyVector4 = function(pos) {\r\n  var e = this.elements;\r\n  var p = pos.elements;\r\n  var v = new Vector4();\r\n  var result = v.elements;\r\n\r\n  result[0] = p[0] * e[0] + p[1] * e[4] + p[2] * e[ 8] + p[3] * e[12];\r\n  result[1] = p[0] * e[1] + p[1] * e[5] + p[2] * e[ 9] + p[3] * e[13];\r\n  result[2] = p[0] * e[2] + p[1] * e[6] + p[2] * e[10] + p[3] * e[14];\r\n  result[3] = p[0] * e[3] + p[1] * e[7] + p[2] * e[11] + p[3] * e[15];\r\n\r\n  return v;\r\n};\r\n\r\n/**\r\n * Transpose the matrix.\r\n * @return this\r\n */\r\nMatrix4.prototype.transpose = function() {\r\n  var e, t;\r\n\r\n  e = this.elements;\r\n\r\n  t = e[ 1];  e[ 1] = e[ 4];  e[ 4] = t;\r\n  t = e[ 2];  e[ 2] = e[ 8];  e[ 8] = t;\r\n  t = e[ 3];  e[ 3] = e[12];  e[12] = t;\r\n  t = e[ 6];  e[ 6] = e[ 9];  e[ 9] = t;\r\n  t = e[ 7];  e[ 7] = e[13];  e[13] = t;\r\n  t = e[11];  e[11] = e[14];  e[14] = t;\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Calculate the inverse matrix of specified matrix, and set to this.\r\n * @param other The source matrix\r\n * @return this\r\n */\r\nMatrix4.prototype.setInverseOf = function(other) {\r\n  var i, s, d, inv, det;\r\n\r\n  s = other.elements;\r\n  d = this.elements;\r\n  inv = new Float32Array(16);\r\n\r\n  inv[0]  =   s[5]*s[10]*s[15] - s[5] *s[11]*s[14] - s[9] *s[6]*s[15]\r\n            + s[9]*s[7] *s[14] + s[13]*s[6] *s[11] - s[13]*s[7]*s[10];\r\n  inv[4]  = - s[4]*s[10]*s[15] + s[4] *s[11]*s[14] + s[8] *s[6]*s[15]\r\n            - s[8]*s[7] *s[14] - s[12]*s[6] *s[11] + s[12]*s[7]*s[10];\r\n  inv[8]  =   s[4]*s[9] *s[15] - s[4] *s[11]*s[13] - s[8] *s[5]*s[15]\r\n            + s[8]*s[7] *s[13] + s[12]*s[5] *s[11] - s[12]*s[7]*s[9];\r\n  inv[12] = - s[4]*s[9] *s[14] + s[4] *s[10]*s[13] + s[8] *s[5]*s[14]\r\n            - s[8]*s[6] *s[13] - s[12]*s[5] *s[10] + s[12]*s[6]*s[9];\r\n\r\n  inv[1]  = - s[1]*s[10]*s[15] + s[1] *s[11]*s[14] + s[9] *s[2]*s[15]\r\n            - s[9]*s[3] *s[14] - s[13]*s[2] *s[11] + s[13]*s[3]*s[10];\r\n  inv[5]  =   s[0]*s[10]*s[15] - s[0] *s[11]*s[14] - s[8] *s[2]*s[15]\r\n            + s[8]*s[3] *s[14] + s[12]*s[2] *s[11] - s[12]*s[3]*s[10];\r\n  inv[9]  = - s[0]*s[9] *s[15] + s[0] *s[11]*s[13] + s[8] *s[1]*s[15]\r\n            - s[8]*s[3] *s[13] - s[12]*s[1] *s[11] + s[12]*s[3]*s[9];\r\n  inv[13] =   s[0]*s[9] *s[14] - s[0] *s[10]*s[13] - s[8] *s[1]*s[14]\r\n            + s[8]*s[2] *s[13] + s[12]*s[1] *s[10] - s[12]*s[2]*s[9];\r\n\r\n  inv[2]  =   s[1]*s[6]*s[15] - s[1] *s[7]*s[14] - s[5] *s[2]*s[15]\r\n            + s[5]*s[3]*s[14] + s[13]*s[2]*s[7]  - s[13]*s[3]*s[6];\r\n  inv[6]  = - s[0]*s[6]*s[15] + s[0] *s[7]*s[14] + s[4] *s[2]*s[15]\r\n            - s[4]*s[3]*s[14] - s[12]*s[2]*s[7]  + s[12]*s[3]*s[6];\r\n  inv[10] =   s[0]*s[5]*s[15] - s[0] *s[7]*s[13] - s[4] *s[1]*s[15]\r\n            + s[4]*s[3]*s[13] + s[12]*s[1]*s[7]  - s[12]*s[3]*s[5];\r\n  inv[14] = - s[0]*s[5]*s[14] + s[0] *s[6]*s[13] + s[4] *s[1]*s[14]\r\n            - s[4]*s[2]*s[13] - s[12]*s[1]*s[6]  + s[12]*s[2]*s[5];\r\n\r\n  inv[3]  = - s[1]*s[6]*s[11] + s[1]*s[7]*s[10] + s[5]*s[2]*s[11]\r\n            - s[5]*s[3]*s[10] - s[9]*s[2]*s[7]  + s[9]*s[3]*s[6];\r\n  inv[7]  =   s[0]*s[6]*s[11] - s[0]*s[7]*s[10] - s[4]*s[2]*s[11]\r\n            + s[4]*s[3]*s[10] + s[8]*s[2]*s[7]  - s[8]*s[3]*s[6];\r\n  inv[11] = - s[0]*s[5]*s[11] + s[0]*s[7]*s[9]  + s[4]*s[1]*s[11]\r\n            - s[4]*s[3]*s[9]  - s[8]*s[1]*s[7]  + s[8]*s[3]*s[5];\r\n  inv[15] =   s[0]*s[5]*s[10] - s[0]*s[6]*s[9]  - s[4]*s[1]*s[10]\r\n            + s[4]*s[2]*s[9]  + s[8]*s[1]*s[6]  - s[8]*s[2]*s[5];\r\n\r\n  det = s[0]*inv[0] + s[1]*inv[4] + s[2]*inv[8] + s[3]*inv[12];\r\n  if (det === 0) {\r\n    return this;\r\n  }\r\n\r\n  det = 1 / det;\r\n  for (i = 0; i < 16; i++) {\r\n    d[i] = inv[i] * det;\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Calculate the inverse matrix of this, and set to this.\r\n * @return this\r\n */\r\nMatrix4.prototype.invert = function() {\r\n  return this.setInverseOf(this);\r\n};\r\n\r\n/**\r\n * Set the orthographic projection matrix.\r\n * @param left The coordinate of the left of clipping plane.\r\n * @param right The coordinate of the right of clipping plane.\r\n * @param bottom The coordinate of the bottom of clipping plane.\r\n * @param top The coordinate of the top top clipping plane.\r\n * @param near The distances to the nearer depth clipping plane. This value is minus if the plane is to be behind the viewer.\r\n * @param far The distances to the farther depth clipping plane. This value is minus if the plane is to be behind the viewer.\r\n * @return this\r\n */\r\nMatrix4.prototype.setOrtho = function(left, right, bottom, top, near, far) {\r\n  var e, rw, rh, rd;\r\n\r\n  if (left === right || bottom === top || near === far) {\r\n    throw 'null frustum';\r\n  }\r\n\r\n  rw = 1 / (right - left);\r\n  rh = 1 / (top - bottom);\r\n  rd = 1 / (far - near);\r\n\r\n  e = this.elements;\r\n\r\n  e[0]  = 2 * rw;\r\n  e[1]  = 0;\r\n  e[2]  = 0;\r\n  e[3]  = 0;\r\n\r\n  e[4]  = 0;\r\n  e[5]  = 2 * rh;\r\n  e[6]  = 0;\r\n  e[7]  = 0;\r\n\r\n  e[8]  = 0;\r\n  e[9]  = 0;\r\n  e[10] = -2 * rd;\r\n  e[11] = 0;\r\n\r\n  e[12] = -(right + left) * rw;\r\n  e[13] = -(top + bottom) * rh;\r\n  e[14] = -(far + near) * rd;\r\n  e[15] = 1;\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Multiply the orthographic projection matrix from the right.\r\n * @param left The coordinate of the left of clipping plane.\r\n * @param right The coordinate of the right of clipping plane.\r\n * @param bottom The coordinate of the bottom of clipping plane.\r\n * @param top The coordinate of the top top clipping plane.\r\n * @param near The distances to the nearer depth clipping plane. This value is minus if the plane is to be behind the viewer.\r\n * @param far The distances to the farther depth clipping plane. This value is minus if the plane is to be behind the viewer.\r\n * @return this\r\n */\r\nMatrix4.prototype.ortho = function(left, right, bottom, top, near, far) {\r\n  return this.concat(new Matrix4().setOrtho(left, right, bottom, top, near, far));\r\n};\r\n\r\n/**\r\n * Set the perspective projection matrix.\r\n * @param left The coordinate of the left of clipping plane.\r\n * @param right The coordinate of the right of clipping plane.\r\n * @param bottom The coordinate of the bottom of clipping plane.\r\n * @param top The coordinate of the top top clipping plane.\r\n * @param near The distances to the nearer depth clipping plane. This value must be plus value.\r\n * @param far The distances to the farther depth clipping plane. This value must be plus value.\r\n * @return this\r\n */\r\nMatrix4.prototype.setFrustum = function(left, right, bottom, top, near, far) {\r\n  var e, rw, rh, rd;\r\n\r\n  if (left === right || top === bottom || near === far) {\r\n    throw 'null frustum';\r\n  }\r\n  if (near <= 0) {\r\n    throw 'near <= 0';\r\n  }\r\n  if (far <= 0) {\r\n    throw 'far <= 0';\r\n  }\r\n\r\n  rw = 1 / (right - left);\r\n  rh = 1 / (top - bottom);\r\n  rd = 1 / (far - near);\r\n\r\n  e = this.elements;\r\n\r\n  e[ 0] = 2 * near * rw;\r\n  e[ 1] = 0;\r\n  e[ 2] = 0;\r\n  e[ 3] = 0;\r\n\r\n  e[ 4] = 0;\r\n  e[ 5] = 2 * near * rh;\r\n  e[ 6] = 0;\r\n  e[ 7] = 0;\r\n\r\n  e[ 8] = (right + left) * rw;\r\n  e[ 9] = (top + bottom) * rh;\r\n  e[10] = -(far + near) * rd;\r\n  e[11] = -1;\r\n\r\n  e[12] = 0;\r\n  e[13] = 0;\r\n  e[14] = -2 * near * far * rd;\r\n  e[15] = 0;\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Multiply the perspective projection matrix from the right.\r\n * @param left The coordinate of the left of clipping plane.\r\n * @param right The coordinate of the right of clipping plane.\r\n * @param bottom The coordinate of the bottom of clipping plane.\r\n * @param top The coordinate of the top top clipping plane.\r\n * @param near The distances to the nearer depth clipping plane. This value must be plus value.\r\n * @param far The distances to the farther depth clipping plane. This value must be plus value.\r\n * @return this\r\n */\r\nMatrix4.prototype.frustum = function(left, right, bottom, top, near, far) {\r\n  return this.concat(new Matrix4().setFrustum(left, right, bottom, top, near, far));\r\n};\r\n\r\n/**\r\n * Set the perspective projection matrix by fovy and aspect.\r\n * @param fovy The angle between the upper and lower sides of the frustum.\r\n * @param aspect The aspect ratio of the frustum. (width/height)\r\n * @param near The distances to the nearer depth clipping plane. This value must be plus value.\r\n * @param far The distances to the farther depth clipping plane. This value must be plus value.\r\n * @return this\r\n */\r\nMatrix4.prototype.setPerspective = function(fovy, aspect, near, far) {\r\n  var e, rd, s, ct;\r\n\r\n  if (near === far || aspect === 0) {\r\n    throw 'null frustum';\r\n  }\r\n  if (near <= 0) {\r\n    throw 'near <= 0';\r\n  }\r\n  if (far <= 0) {\r\n    throw 'far <= 0';\r\n  }\r\n\r\n  fovy = Math.PI * fovy / 180 / 2;\r\n  s = Math.sin(fovy);\r\n  if (s === 0) {\r\n    throw 'null frustum';\r\n  }\r\n\r\n  rd = 1 / (far - near);\r\n  ct = Math.cos(fovy) / s;\r\n\r\n  e = this.elements;\r\n\r\n  e[0]  = ct / aspect;\r\n  e[1]  = 0;\r\n  e[2]  = 0;\r\n  e[3]  = 0;\r\n\r\n  e[4]  = 0;\r\n  e[5]  = ct;\r\n  e[6]  = 0;\r\n  e[7]  = 0;\r\n\r\n  e[8]  = 0;\r\n  e[9]  = 0;\r\n  e[10] = -(far + near) * rd;\r\n  e[11] = -1;\r\n\r\n  e[12] = 0;\r\n  e[13] = 0;\r\n  e[14] = -2 * near * far * rd;\r\n  e[15] = 0;\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Multiply the perspective projection matrix from the right.\r\n * @param fovy The angle between the upper and lower sides of the frustum.\r\n * @param aspect The aspect ratio of the frustum. (width/height)\r\n * @param near The distances to the nearer depth clipping plane. This value must be plus value.\r\n * @param far The distances to the farther depth clipping plane. This value must be plus value.\r\n * @return this\r\n */\r\nMatrix4.prototype.perspective = function(fovy, aspect, near, far) {\r\n  return this.concat(new Matrix4().setPerspective(fovy, aspect, near, far));\r\n};\r\n\r\n/**\r\n * Set the matrix for scaling.\r\n * @param x The scale factor along the X axis\r\n * @param y The scale factor along the Y axis\r\n * @param z The scale factor along the Z axis\r\n * @return this\r\n */\r\nMatrix4.prototype.setScale = function(x, y, z) {\r\n  var e = this.elements;\r\n  e[0] = x;  e[4] = 0;  e[8]  = 0;  e[12] = 0;\r\n  e[1] = 0;  e[5] = y;  e[9]  = 0;  e[13] = 0;\r\n  e[2] = 0;  e[6] = 0;  e[10] = z;  e[14] = 0;\r\n  e[3] = 0;  e[7] = 0;  e[11] = 0;  e[15] = 1;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Multiply the matrix for scaling from the right.\r\n * @param x The scale factor along the X axis\r\n * @param y The scale factor along the Y axis\r\n * @param z The scale factor along the Z axis\r\n * @return this\r\n */\r\nMatrix4.prototype.scale = function(x, y, z) {\r\n  var e = this.elements;\r\n  e[0] *= x;  e[4] *= y;  e[8]  *= z;\r\n  e[1] *= x;  e[5] *= y;  e[9]  *= z;\r\n  e[2] *= x;  e[6] *= y;  e[10] *= z;\r\n  e[3] *= x;  e[7] *= y;  e[11] *= z;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Set the matrix for translation.\r\n * @param x The X value of a translation.\r\n * @param y The Y value of a translation.\r\n * @param z The Z value of a translation.\r\n * @return this\r\n */\r\nMatrix4.prototype.setTranslate = function(x, y, z) {\r\n  var e = this.elements;\r\n  e[0] = 1;  e[4] = 0;  e[8]  = 0;  e[12] = x;\r\n  e[1] = 0;  e[5] = 1;  e[9]  = 0;  e[13] = y;\r\n  e[2] = 0;  e[6] = 0;  e[10] = 1;  e[14] = z;\r\n  e[3] = 0;  e[7] = 0;  e[11] = 0;  e[15] = 1;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Multiply the matrix for translation from the right.\r\n * @param x The X value of a translation.\r\n * @param y The Y value of a translation.\r\n * @param z The Z value of a translation.\r\n * @return this\r\n */\r\nMatrix4.prototype.translate = function(x, y, z) {\r\n  var e = this.elements;\r\n  e[12] += e[0] * x + e[4] * y + e[8]  * z;\r\n  e[13] += e[1] * x + e[5] * y + e[9]  * z;\r\n  e[14] += e[2] * x + e[6] * y + e[10] * z;\r\n  e[15] += e[3] * x + e[7] * y + e[11] * z;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Set the matrix for rotation.\r\n * The vector of rotation axis may not be normalized.\r\n * @param angle The angle of rotation (degrees)\r\n * @param x The X coordinate of vector of rotation axis.\r\n * @param y The Y coordinate of vector of rotation axis.\r\n * @param z The Z coordinate of vector of rotation axis.\r\n * @return this\r\n */\r\nMatrix4.prototype.setRotate = function(angle, x, y, z) {\r\n  var e, s, c, len, rlen, nc, xy, yz, zx, xs, ys, zs;\r\n\r\n  angle = Math.PI * angle / 180;\r\n  e = this.elements;\r\n\r\n  s = Math.sin(angle);\r\n  c = Math.cos(angle);\r\n\r\n  if (0 !== x && 0 === y && 0 === z) {\r\n    // Rotation around X axis\r\n    if (x < 0) {\r\n      s = -s;\r\n    }\r\n    e[0] = 1;  e[4] = 0;  e[ 8] = 0;  e[12] = 0;\r\n    e[1] = 0;  e[5] = c;  e[ 9] =-s;  e[13] = 0;\r\n    e[2] = 0;  e[6] = s;  e[10] = c;  e[14] = 0;\r\n    e[3] = 0;  e[7] = 0;  e[11] = 0;  e[15] = 1;\r\n  } else if (0 === x && 0 !== y && 0 === z) {\r\n    // Rotation around Y axis\r\n    if (y < 0) {\r\n      s = -s;\r\n    }\r\n    e[0] = c;  e[4] = 0;  e[ 8] = s;  e[12] = 0;\r\n    e[1] = 0;  e[5] = 1;  e[ 9] = 0;  e[13] = 0;\r\n    e[2] =-s;  e[6] = 0;  e[10] = c;  e[14] = 0;\r\n    e[3] = 0;  e[7] = 0;  e[11] = 0;  e[15] = 1;\r\n  } else if (0 === x && 0 === y && 0 !== z) {\r\n    // Rotation around Z axis\r\n    if (z < 0) {\r\n      s = -s;\r\n    }\r\n    e[0] = c;  e[4] =-s;  e[ 8] = 0;  e[12] = 0;\r\n    e[1] = s;  e[5] = c;  e[ 9] = 0;  e[13] = 0;\r\n    e[2] = 0;  e[6] = 0;  e[10] = 1;  e[14] = 0;\r\n    e[3] = 0;  e[7] = 0;  e[11] = 0;  e[15] = 1;\r\n  } else {\r\n    // Rotation around another axis\r\n    len = Math.sqrt(x*x + y*y + z*z);\r\n    if (len !== 1) {\r\n      rlen = 1 / len;\r\n      x *= rlen;\r\n      y *= rlen;\r\n      z *= rlen;\r\n    }\r\n    nc = 1 - c;\r\n    xy = x * y;\r\n    yz = y * z;\r\n    zx = z * x;\r\n    xs = x * s;\r\n    ys = y * s;\r\n    zs = z * s;\r\n\r\n    e[ 0] = x*x*nc +  c;\r\n    e[ 1] = xy *nc + zs;\r\n    e[ 2] = zx *nc - ys;\r\n    e[ 3] = 0;\r\n\r\n    e[ 4] = xy *nc - zs;\r\n    e[ 5] = y*y*nc +  c;\r\n    e[ 6] = yz *nc + xs;\r\n    e[ 7] = 0;\r\n\r\n    e[ 8] = zx *nc + ys;\r\n    e[ 9] = yz *nc - xs;\r\n    e[10] = z*z*nc +  c;\r\n    e[11] = 0;\r\n\r\n    e[12] = 0;\r\n    e[13] = 0;\r\n    e[14] = 0;\r\n    e[15] = 1;\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Multiply the matrix for rotation from the right.\r\n * The vector of rotation axis may not be normalized.\r\n * @param angle The angle of rotation (degrees)\r\n * @param x The X coordinate of vector of rotation axis.\r\n * @param y The Y coordinate of vector of rotation axis.\r\n * @param z The Z coordinate of vector of rotation axis.\r\n * @return this\r\n */\r\nMatrix4.prototype.rotate = function(angle, x, y, z) {\r\n  return this.concat(new Matrix4().setRotate(angle, x, y, z));\r\n};\r\n\r\n/**\r\n * Set the viewing matrix.\r\n * @param eyeX, eyeY, eyeZ The position of the eye point.\r\n * @param centerX, centerY, centerZ The position of the reference point.\r\n * @param upX, upY, upZ The direction of the up vector.\r\n * @return this\r\n */\r\nMatrix4.prototype.setLookAt = function(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ) {\r\n  var e, fx, fy, fz, rlf, sx, sy, sz, rls, ux, uy, uz;\r\n\r\n  fx = centerX - eyeX;\r\n  fy = centerY - eyeY;\r\n  fz = centerZ - eyeZ;\r\n\r\n  // Normalize f.\r\n  rlf = 1 / Math.sqrt(fx*fx + fy*fy + fz*fz);\r\n  fx *= rlf;\r\n  fy *= rlf;\r\n  fz *= rlf;\r\n\r\n  // Calculate cross product of f and up.\r\n  sx = fy * upZ - fz * upY;\r\n  sy = fz * upX - fx * upZ;\r\n  sz = fx * upY - fy * upX;\r\n\r\n  // Normalize s.\r\n  rls = 1 / Math.sqrt(sx*sx + sy*sy + sz*sz);\r\n  sx *= rls;\r\n  sy *= rls;\r\n  sz *= rls;\r\n\r\n  // Calculate cross product of s and f.\r\n  ux = sy * fz - sz * fy;\r\n  uy = sz * fx - sx * fz;\r\n  uz = sx * fy - sy * fx;\r\n\r\n  // Set to this.\r\n  e = this.elements;\r\n  e[0] = sx;\r\n  e[1] = ux;\r\n  e[2] = -fx;\r\n  e[3] = 0;\r\n\r\n  e[4] = sy;\r\n  e[5] = uy;\r\n  e[6] = -fy;\r\n  e[7] = 0;\r\n\r\n  e[8] = sz;\r\n  e[9] = uz;\r\n  e[10] = -fz;\r\n  e[11] = 0;\r\n\r\n  e[12] = 0;\r\n  e[13] = 0;\r\n  e[14] = 0;\r\n  e[15] = 1;\r\n\r\n  // Translate.\r\n  return this.translate(-eyeX, -eyeY, -eyeZ);\r\n};\r\n\r\n/**\r\n * Multiply the viewing matrix from the right.\r\n * @param eyeX, eyeY, eyeZ The position of the eye point.\r\n * @param centerX, centerY, centerZ The position of the reference point.\r\n * @param upX, upY, upZ The direction of the up vector.\r\n * @return this\r\n */\r\nMatrix4.prototype.lookAt = function(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ) {\r\n  return this.concat(new Matrix4().setLookAt(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ));\r\n};\r\n\r\n/**\r\n * Multiply the matrix for project vertex to plane from the right.\r\n * @param plane The array[A, B, C, D] of the equation of plane \"Ax + By + Cz + D = 0\".\r\n * @param light The array which stored coordinates of the light. if light[3]=0, treated as parallel light.\r\n * @return this\r\n */\r\nMatrix4.prototype.dropShadow = function(plane, light) {\r\n  var mat = new Matrix4();\r\n  var e = mat.elements;\r\n\r\n  var dot = plane[0] * light[0] + plane[1] * light[1] + plane[2] * light[2] + plane[3] * light[3];\r\n\r\n  e[ 0] = dot - light[0] * plane[0];\r\n  e[ 1] =     - light[1] * plane[0];\r\n  e[ 2] =     - light[2] * plane[0];\r\n  e[ 3] =     - light[3] * plane[0];\r\n\r\n  e[ 4] =     - light[0] * plane[1];\r\n  e[ 5] = dot - light[1] * plane[1];\r\n  e[ 6] =     - light[2] * plane[1];\r\n  e[ 7] =     - light[3] * plane[1];\r\n\r\n  e[ 8] =     - light[0] * plane[2];\r\n  e[ 9] =     - light[1] * plane[2];\r\n  e[10] = dot - light[2] * plane[2];\r\n  e[11] =     - light[3] * plane[2];\r\n\r\n  e[12] =     - light[0] * plane[3];\r\n  e[13] =     - light[1] * plane[3];\r\n  e[14] =     - light[2] * plane[3];\r\n  e[15] = dot - light[3] * plane[3];\r\n\r\n  return this.concat(mat);\r\n}\r\n\r\n/**\r\n * Multiply the matrix for project vertex to plane from the right.(Projected by parallel light.)\r\n * @param normX, normY, normZ The normal vector of the plane.(Not necessary to be normalized.)\r\n * @param planeX, planeY, planeZ The coordinate of arbitrary points on a plane.\r\n * @param lightX, lightY, lightZ The vector of the direction of light.(Not necessary to be normalized.)\r\n * @return this\r\n */\r\nMatrix4.prototype.dropShadowDirectionally = function(normX, normY, normZ, planeX, planeY, planeZ, lightX, lightY, lightZ) {\r\n  var a = planeX * normX + planeY * normY + planeZ * normZ;\r\n  return this.dropShadow([normX, normY, normZ, -a], [lightX, lightY, lightZ, 0]);\r\n};\r\n\r\n/**\r\n * Constructor of Vector3\r\n * If opt_src is specified, new vector is initialized by opt_src.\r\n * @param opt_src source vector(option)\r\n */\r\nvar Vector3 = function(opt_src) {\r\n  var v = new Float32Array(3);\r\n  if (opt_src && typeof opt_src === 'object') {\r\n    v[0] = opt_src[0]; v[1] = opt_src[1]; v[2] = opt_src[2];\r\n  } \r\n  this.elements = v;\r\n}\r\n\r\n/**\r\n  * Normalize.\r\n  * @return this\r\n  */\r\nVector3.prototype.normalize = function() {\r\n  var v = this.elements;\r\n  var c = v[0], d = v[1], e = v[2], g = Math.sqrt(c*c+d*d+e*e);\r\n  if(g){\r\n    if(g == 1)\r\n        return this;\r\n   } else {\r\n     v[0] = 0; v[1] = 0; v[2] = 0;\r\n     return this;\r\n   }\r\n   g = 1/g;\r\n   v[0] = c*g; v[1] = d*g; v[2] = e*g;\r\n   return this;\r\n};\r\n\r\n/**\r\n * Constructor of Vector4\r\n * If opt_src is specified, new vector is initialized by opt_src.\r\n * @param opt_src source vector(option)\r\n */\r\nvar Vector4 = function(opt_src) {\r\n  var v = new Float32Array(4);\r\n  if (opt_src && typeof opt_src === 'object') {\r\n    v[0] = opt_src[0]; v[1] = opt_src[1]; v[2] = opt_src[2]; v[3] = opt_src[3];\r\n  } \r\n  this.elements = v;\r\n}\r\n\r\n__webpack_require__.g.Matrix4 = Matrix4;\r\n__webpack_require__.g.Vector3 = Vector3;\r\n__webpack_require__.g.Vector4 = Vector4;\r\n\n\n//# sourceURL=webpack://webgl-guide/./lib/cuon-matrix.js?");

/***/ }),

/***/ "./lib/cuon-utils.js":
/*!***************************!*\
  !*** ./lib/cuon-utils.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("// cuon-utils.js (c) 2012 kanda and matsuda\r\n/**\r\n * Create a program object and make current\r\n * @param gl GL context\r\n * @param vshader a vertex shader program (string)\r\n * @param fshader a fragment shader program (string)\r\n * @return true, if the program object was created and successfully made current\r\n */\r\nfunction initShaders(gl, vshader, fshader) {\r\n  var program = createProgram(gl, vshader, fshader);\r\n  if (!program) {\r\n    console.log(\"Failed to create program\");\r\n    return false;\r\n  }\r\n\r\n  gl.useProgram(program);\r\n  gl.program = program;\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Create the linked program object\r\n * @param gl GL context\r\n * @param vshader a vertex shader program (string)\r\n * @param fshader a fragment shader program (string)\r\n * @return created program object, or null if the creation has failed\r\n */\r\nfunction createProgram(gl, vshader, fshader) {\r\n  // Create shader object\r\n  var vertexShader = loadShader(gl, gl.VERTEX_SHADER, vshader);\r\n  var fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fshader);\r\n  if (!vertexShader || !fragmentShader) {\r\n    return null;\r\n  }\r\n\r\n  // Create a program object\r\n  var program = gl.createProgram();\r\n  if (!program) {\r\n    return null;\r\n  }\r\n\r\n  // Attach the shader objects\r\n  gl.attachShader(program, vertexShader);\r\n  gl.attachShader(program, fragmentShader);\r\n\r\n  // Link the program object\r\n  gl.linkProgram(program);\r\n\r\n  // Check the result of linking\r\n  var linked = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n  if (!linked) {\r\n    var error = gl.getProgramInfoLog(program);\r\n    console.log(\"Failed to link program: \" + error);\r\n    gl.deleteProgram(program);\r\n    gl.deleteShader(fragmentShader);\r\n    gl.deleteShader(vertexShader);\r\n    return null;\r\n  }\r\n  return program;\r\n}\r\n\r\n/**\r\n * Create a shader object\r\n * @param gl GL context\r\n * @param type the type of the shader object to be created\r\n * @param source shader program (string)\r\n * @return created shader object, or null if the creation has failed.\r\n */\r\nfunction loadShader(gl, type, source) {\r\n  // Create shader object\r\n  var shader = gl.createShader(type);\r\n  if (shader == null) {\r\n    console.log(\"unable to create shader\");\r\n    return null;\r\n  }\r\n\r\n  // Set the shader program\r\n  gl.shaderSource(shader, source);\r\n\r\n  // Compile the shader\r\n  gl.compileShader(shader);\r\n\r\n  // Check the result of compilation\r\n  var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n  if (!compiled) {\r\n    var error = gl.getShaderInfoLog(shader);\r\n    console.log(\"Failed to compile shader: \" + error);\r\n    gl.deleteShader(shader);\r\n    return null;\r\n  }\r\n\r\n  return shader;\r\n}\r\n\r\n/**\r\n * Initialize and get the rendering for WebGL\r\n * @param canvas <cavnas> element\r\n * @param opt_debug flag to initialize the context for debugging\r\n * @return the rendering context for WebGL\r\n */\r\nfunction getWebGLContext(canvas, opt_debug) {\r\n  // Get the rendering context for WebGL\r\n  var gl = WebGLUtils.setupWebGL(canvas);\r\n  if (!gl) return null;\r\n\r\n  // if opt_debug is explicitly false, create the context for debugging\r\n  if (arguments.length < 2 || opt_debug) {\r\n    gl = WebGLDebugUtils.makeDebugContext(gl);\r\n  }\r\n\r\n  return gl;\r\n}\r\n\r\n__webpack_require__.g.initShaders = initShaders;\r\n__webpack_require__.g.createProgram = createProgram;\r\n__webpack_require__.g.loadShader = loadShader;\r\n__webpack_require__.g.getWebGLContext = getWebGLContext;\r\n\n\n//# sourceURL=webpack://webgl-guide/./lib/cuon-utils.js?");

/***/ }),

/***/ "./lib/webgl-debug.js":
/*!****************************!*\
  !*** ./lib/webgl-debug.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("//Copyright (c) 2009 The Chromium Authors. All rights reserved.\r\n//Use of this source code is governed by a BSD-style license that can be\r\n//found in the LICENSE file.\r\n\r\n// Various functions for helping debug WebGL apps.\r\n\r\n__webpack_require__.g.WebGLDebugUtils = function() {\r\n\r\n/**\r\n * Wrapped logging function.\r\n * @param {string} msg Message to log.\r\n */\r\nvar log = function(msg) {\r\n  if (window.console && window.console.log) {\r\n    window.console.log(msg);\r\n  }\r\n};\r\n\r\n/**\r\n * Which arguements are enums.\r\n * @type {!Object.<number, string>}\r\n */\r\nvar glValidEnumContexts = {\r\n\r\n  // Generic setters and getters\r\n\r\n  'enable': { 0:true },\r\n  'disable': { 0:true },\r\n  'getParameter': { 0:true },\r\n\r\n  // Rendering\r\n\r\n  'drawArrays': { 0:true },\r\n  'drawElements': { 0:true, 2:true },\r\n\r\n  // Shaders\r\n\r\n  'createShader': { 0:true },\r\n  'getShaderParameter': { 1:true },\r\n  'getProgramParameter': { 1:true },\r\n\r\n  // Vertex attributes\r\n\r\n  'getVertexAttrib': { 1:true },\r\n  'vertexAttribPointer': { 2:true },\r\n\r\n  // Textures\r\n\r\n  'bindTexture': { 0:true },\r\n  'activeTexture': { 0:true },\r\n  'getTexParameter': { 0:true, 1:true },\r\n  'texParameterf': { 0:true, 1:true },\r\n  'texParameteri': { 0:true, 1:true, 2:true },\r\n  'texImage2D': { 0:true, 2:true, 6:true, 7:true },\r\n  'texSubImage2D': { 0:true, 6:true, 7:true },\r\n  'copyTexImage2D': { 0:true, 2:true },\r\n  'copyTexSubImage2D': { 0:true },\r\n  'generateMipmap': { 0:true },\r\n\r\n  // Buffer objects\r\n\r\n  'bindBuffer': { 0:true },\r\n  'bufferData': { 0:true, 2:true },\r\n  'bufferSubData': { 0:true },\r\n  'getBufferParameter': { 0:true, 1:true },\r\n\r\n  // Renderbuffers and framebuffers\r\n\r\n  'pixelStorei': { 0:true, 1:true },\r\n  'readPixels': { 4:true, 5:true },\r\n  'bindRenderbuffer': { 0:true },\r\n  'bindFramebuffer': { 0:true },\r\n  'checkFramebufferStatus': { 0:true },\r\n  'framebufferRenderbuffer': { 0:true, 1:true, 2:true },\r\n  'framebufferTexture2D': { 0:true, 1:true, 2:true },\r\n  'getFramebufferAttachmentParameter': { 0:true, 1:true, 2:true },\r\n  'getRenderbufferParameter': { 0:true, 1:true },\r\n  'renderbufferStorage': { 0:true, 1:true },\r\n\r\n  // Frame buffer operations (clear, blend, depth test, stencil)\r\n\r\n  'clear': { 0:true },\r\n  'depthFunc': { 0:true },\r\n  'blendFunc': { 0:true, 1:true },\r\n  'blendFuncSeparate': { 0:true, 1:true, 2:true, 3:true },\r\n  'blendEquation': { 0:true },\r\n  'blendEquationSeparate': { 0:true, 1:true },\r\n  'stencilFunc': { 0:true },\r\n  'stencilFuncSeparate': { 0:true, 1:true },\r\n  'stencilMaskSeparate': { 0:true },\r\n  'stencilOp': { 0:true, 1:true, 2:true },\r\n  'stencilOpSeparate': { 0:true, 1:true, 2:true, 3:true },\r\n\r\n  // Culling\r\n\r\n  'cullFace': { 0:true },\r\n  'frontFace': { 0:true },\r\n};\r\n\r\n/**\r\n * Map of numbers to names.\r\n * @type {Object}\r\n */\r\nvar glEnums = null;\r\n\r\n/**\r\n * Initializes this module. Safe to call more than once.\r\n * @param {!WebGLRenderingContext} ctx A WebGL context. If\r\n *    you have more than one context it doesn't matter which one\r\n *    you pass in, it is only used to pull out constants.\r\n */\r\nfunction init(ctx) {\r\n  if (glEnums == null) {\r\n    glEnums = { };\r\n    for (var propertyName in ctx) {\r\n      if (typeof ctx[propertyName] == 'number') {\r\n        glEnums[ctx[propertyName]] = propertyName;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Checks the utils have been initialized.\r\n */\r\nfunction checkInit() {\r\n  if (glEnums == null) {\r\n    throw 'WebGLDebugUtils.init(ctx) not called';\r\n  }\r\n}\r\n\r\n/**\r\n * Returns true or false if value matches any WebGL enum\r\n * @param {*} value Value to check if it might be an enum.\r\n * @return {boolean} True if value matches one of the WebGL defined enums\r\n */\r\nfunction mightBeEnum(value) {\r\n  checkInit();\r\n  return (glEnums[value] !== undefined);\r\n}\r\n\r\n/**\r\n * Gets an string version of an WebGL enum.\r\n *\r\n * Example:\r\n *   var str = WebGLDebugUtil.glEnumToString(ctx.getError());\r\n *\r\n * @param {number} value Value to return an enum for\r\n * @return {string} The string version of the enum.\r\n */\r\nfunction glEnumToString(value) {\r\n  checkInit();\r\n  var name = glEnums[value];\r\n  return (name !== undefined) ? name :\r\n      (\"*UNKNOWN WebGL ENUM (0x\" + value.toString(16) + \")\");\r\n}\r\n\r\n/**\r\n * Returns the string version of a WebGL argument.\r\n * Attempts to convert enum arguments to strings.\r\n * @param {string} functionName the name of the WebGL function.\r\n * @param {number} argumentIndx the index of the argument.\r\n * @param {*} value The value of the argument.\r\n * @return {string} The value as a string.\r\n */\r\nfunction glFunctionArgToString(functionName, argumentIndex, value) {\r\n  var funcInfo = glValidEnumContexts[functionName];\r\n  if (funcInfo !== undefined) {\r\n    if (funcInfo[argumentIndex]) {\r\n      return glEnumToString(value);\r\n    }\r\n  }\r\n  return value.toString();\r\n}\r\n\r\n/**\r\n * Given a WebGL context returns a wrapped context that calls\r\n * gl.getError after every command and calls a function if the\r\n * result is not gl.NO_ERROR.\r\n *\r\n * @param {!WebGLRenderingContext} ctx The webgl context to\r\n *        wrap.\r\n * @param {!function(err, funcName, args): void} opt_onErrorFunc\r\n *        The function to call when gl.getError returns an\r\n *        error. If not specified the default function calls\r\n *        console.log with a message.\r\n */\r\nfunction makeDebugContext(ctx, opt_onErrorFunc) {\r\n  init(ctx);\r\n  opt_onErrorFunc = opt_onErrorFunc || function(err, functionName, args) {\r\n        // apparently we can't do args.join(\",\");\r\n        var argStr = \"\";\r\n        for (var ii = 0; ii < args.length; ++ii) {\r\n          argStr += ((ii == 0) ? '' : ', ') +\r\n              glFunctionArgToString(functionName, ii, args[ii]);\r\n        }\r\n        log(\"WebGL error \"+ glEnumToString(err) + \" in \"+ functionName +\r\n            \"(\" + argStr + \")\");\r\n      };\r\n\r\n  // Holds booleans for each GL error so after we get the error ourselves\r\n  // we can still return it to the client app.\r\n  var glErrorShadow = { };\r\n\r\n  // Makes a function that calls a WebGL function and then calls getError.\r\n  function makeErrorWrapper(ctx, functionName) {\r\n    return function() {\r\n      var result = ctx[functionName].apply(ctx, arguments);\r\n      var err = ctx.getError();\r\n      if (err != 0) {\r\n        glErrorShadow[err] = true;\r\n        opt_onErrorFunc(err, functionName, arguments);\r\n      }\r\n      return result;\r\n    };\r\n  }\r\n\r\n  // Make a an object that has a copy of every property of the WebGL context\r\n  // but wraps all functions.\r\n  var wrapper = {};\r\n  for (var propertyName in ctx) {\r\n    if (typeof ctx[propertyName] == 'function') {\r\n       wrapper[propertyName] = makeErrorWrapper(ctx, propertyName);\r\n     } else {\r\n       wrapper[propertyName] = ctx[propertyName];\r\n     }\r\n  }\r\n\r\n  // Override the getError function with one that returns our saved results.\r\n  wrapper.getError = function() {\r\n    for (var err in glErrorShadow) {\r\n      if (glErrorShadow[err]) {\r\n        glErrorShadow[err] = false;\r\n        return err;\r\n      }\r\n    }\r\n    return ctx.NO_ERROR;\r\n  };\r\n\r\n  return wrapper;\r\n}\r\n\r\nfunction resetToInitialState(ctx) {\r\n  var numAttribs = ctx.getParameter(ctx.MAX_VERTEX_ATTRIBS);\r\n  var tmp = ctx.createBuffer();\r\n  ctx.bindBuffer(ctx.ARRAY_BUFFER, tmp);\r\n  for (var ii = 0; ii < numAttribs; ++ii) {\r\n    ctx.disableVertexAttribArray(ii);\r\n    ctx.vertexAttribPointer(ii, 4, ctx.FLOAT, false, 0, 0);\r\n    ctx.vertexAttrib1f(ii, 0);\r\n  }\r\n  ctx.deleteBuffer(tmp);\r\n\r\n  var numTextureUnits = ctx.getParameter(ctx.MAX_TEXTURE_IMAGE_UNITS);\r\n  for (var ii = 0; ii < numTextureUnits; ++ii) {\r\n    ctx.activeTexture(ctx.TEXTURE0 + ii);\r\n    ctx.bindTexture(ctx.TEXTURE_CUBE_MAP, null);\r\n    ctx.bindTexture(ctx.TEXTURE_2D, null);\r\n  }\r\n\r\n  ctx.activeTexture(ctx.TEXTURE0);\r\n  ctx.useProgram(null);\r\n  ctx.bindBuffer(ctx.ARRAY_BUFFER, null);\r\n  ctx.bindBuffer(ctx.ELEMENT_ARRAY_BUFFER, null);\r\n  ctx.bindFramebuffer(ctx.FRAMEBUFFER, null);\r\n  ctx.bindRenderbuffer(ctx.RENDERBUFFER, null);\r\n  ctx.disable(ctx.BLEND);\r\n  ctx.disable(ctx.CULL_FACE);\r\n  ctx.disable(ctx.DEPTH_TEST);\r\n  ctx.disable(ctx.DITHER);\r\n  ctx.disable(ctx.SCISSOR_TEST);\r\n  ctx.blendColor(0, 0, 0, 0);\r\n  ctx.blendEquation(ctx.FUNC_ADD);\r\n  ctx.blendFunc(ctx.ONE, ctx.ZERO);\r\n  ctx.clearColor(0, 0, 0, 0);\r\n  ctx.clearDepth(1);\r\n  ctx.clearStencil(-1);\r\n  ctx.colorMask(true, true, true, true);\r\n  ctx.cullFace(ctx.BACK);\r\n  ctx.depthFunc(ctx.LESS);\r\n  ctx.depthMask(true);\r\n  ctx.depthRange(0, 1);\r\n  ctx.frontFace(ctx.CCW);\r\n  ctx.hint(ctx.GENERATE_MIPMAP_HINT, ctx.DONT_CARE);\r\n  ctx.lineWidth(1);\r\n  ctx.pixelStorei(ctx.PACK_ALIGNMENT, 4);\r\n  ctx.pixelStorei(ctx.UNPACK_ALIGNMENT, 4);\r\n  ctx.pixelStorei(ctx.UNPACK_FLIP_Y_WEBGL, false);\r\n  ctx.pixelStorei(ctx.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\r\n  // TODO: Delete this IF.\r\n  if (ctx.UNPACK_COLORSPACE_CONVERSION_WEBGL) {\r\n    ctx.pixelStorei(ctx.UNPACK_COLORSPACE_CONVERSION_WEBGL, ctx.BROWSER_DEFAULT_WEBGL);\r\n  }\r\n  ctx.polygonOffset(0, 0);\r\n  ctx.sampleCoverage(1, false);\r\n  ctx.scissor(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n  ctx.stencilFunc(ctx.ALWAYS, 0, 0xFFFFFFFF);\r\n  ctx.stencilMask(0xFFFFFFFF);\r\n  ctx.stencilOp(ctx.KEEP, ctx.KEEP, ctx.KEEP);\r\n  ctx.viewport(0, 0, ctx.canvas.clientWidth, ctx.canvas.clientHeight);\r\n  ctx.clear(ctx.COLOR_BUFFER_BIT | ctx.DEPTH_BUFFER_BIT | ctx.STENCIL_BUFFER_BIT);\r\n\r\n  // TODO: This should NOT be needed but Firefox fails with 'hint'\r\n  while(ctx.getError());\r\n}\r\n\r\nfunction makeLostContextSimulatingContext(ctx) {\r\n  var wrapper_ = {};\r\n  var contextId_ = 1;\r\n  var contextLost_ = false;\r\n  var resourceId_ = 0;\r\n  var resourceDb_ = [];\r\n  var onLost_ = undefined;\r\n  var onRestored_ = undefined;\r\n  var nextOnRestored_ = undefined;\r\n\r\n  // Holds booleans for each GL error so can simulate errors.\r\n  var glErrorShadow_ = { };\r\n\r\n  function isWebGLObject(obj) {\r\n    //return false;\r\n    return (obj instanceof WebGLBuffer ||\r\n            obj instanceof WebGLFramebuffer ||\r\n            obj instanceof WebGLProgram ||\r\n            obj instanceof WebGLRenderbuffer ||\r\n            obj instanceof WebGLShader ||\r\n            obj instanceof WebGLTexture);\r\n  }\r\n\r\n  function checkResources(args) {\r\n    for (var ii = 0; ii < args.length; ++ii) {\r\n      var arg = args[ii];\r\n      if (isWebGLObject(arg)) {\r\n        return arg.__webglDebugContextLostId__ == contextId_;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function clearErrors() {\r\n    var k = Object.keys(glErrorShadow_);\r\n    for (var ii = 0; ii < k.length; ++ii) {\r\n      delete glErrorShdow_[k];\r\n    }\r\n  }\r\n\r\n  // Makes a function that simulates WebGL when out of context.\r\n  function makeLostContextWrapper(ctx, functionName) {\r\n    var f = ctx[functionName];\r\n    return function() {\r\n      // Only call the functions if the context is not lost.\r\n      if (!contextLost_) {\r\n        if (!checkResources(arguments)) {\r\n          glErrorShadow_[ctx.INVALID_OPERATION] = true;\r\n          return;\r\n        }\r\n        var result = f.apply(ctx, arguments);\r\n        return result;\r\n      }\r\n    };\r\n  }\r\n\r\n  for (var propertyName in ctx) {\r\n    if (typeof ctx[propertyName] == 'function') {\r\n       wrapper_[propertyName] = makeLostContextWrapper(ctx, propertyName);\r\n     } else {\r\n       wrapper_[propertyName] = ctx[propertyName];\r\n     }\r\n  }\r\n\r\n  function makeWebGLContextEvent(statusMessage) {\r\n    return {statusMessage: statusMessage};\r\n  }\r\n\r\n  function freeResources() {\r\n    for (var ii = 0; ii < resourceDb_.length; ++ii) {\r\n      var resource = resourceDb_[ii];\r\n      if (resource instanceof WebGLBuffer) {\r\n        ctx.deleteBuffer(resource);\r\n      } else if (resource instanceof WebctxFramebuffer) {\r\n        ctx.deleteFramebuffer(resource);\r\n      } else if (resource instanceof WebctxProgram) {\r\n        ctx.deleteProgram(resource);\r\n      } else if (resource instanceof WebctxRenderbuffer) {\r\n        ctx.deleteRenderbuffer(resource);\r\n      } else if (resource instanceof WebctxShader) {\r\n        ctx.deleteShader(resource);\r\n      } else if (resource instanceof WebctxTexture) {\r\n        ctx.deleteTexture(resource);\r\n      }\r\n    }\r\n  }\r\n\r\n  wrapper_.loseContext = function() {\r\n    if (!contextLost_) {\r\n      contextLost_ = true;\r\n      ++contextId_;\r\n      while (ctx.getError());\r\n      clearErrors();\r\n      glErrorShadow_[ctx.CONTEXT_LOST_WEBGL] = true;\r\n      setTimeout(function() {\r\n          if (onLost_) {\r\n            onLost_(makeWebGLContextEvent(\"context lost\"));\r\n          }\r\n        }, 0);\r\n    }\r\n  };\r\n\r\n  wrapper_.restoreContext = function() {\r\n    if (contextLost_) {\r\n      if (onRestored_) {\r\n        setTimeout(function() {\r\n            freeResources();\r\n            resetToInitialState(ctx);\r\n            contextLost_ = false;\r\n            if (onRestored_) {\r\n              var callback = onRestored_;\r\n              onRestored_ = nextOnRestored_;\r\n              nextOnRestored_ = undefined;\r\n              callback(makeWebGLContextEvent(\"context restored\"));\r\n            }\r\n          }, 0);\r\n      } else {\r\n        throw \"You can not restore the context without a listener\"\r\n      }\r\n    }\r\n  };\r\n\r\n  // Wrap a few functions specially.\r\n  wrapper_.getError = function() {\r\n    if (!contextLost_) {\r\n      var err;\r\n      while (err = ctx.getError()) {\r\n        glErrorShadow_[err] = true;\r\n      }\r\n    }\r\n    for (var err in glErrorShadow_) {\r\n      if (glErrorShadow_[err]) {\r\n        delete glErrorShadow_[err];\r\n        return err;\r\n      }\r\n    }\r\n    return ctx.NO_ERROR;\r\n  };\r\n\r\n  var creationFunctions = [\r\n    \"createBuffer\",\r\n    \"createFramebuffer\",\r\n    \"createProgram\",\r\n    \"createRenderbuffer\",\r\n    \"createShader\",\r\n    \"createTexture\"\r\n  ];\r\n  for (var ii = 0; ii < creationFunctions.length; ++ii) {\r\n    var functionName = creationFunctions[ii];\r\n    wrapper_[functionName] = function(f) {\r\n      return function() {\r\n        if (contextLost_) {\r\n          return null;\r\n        }\r\n        var obj = f.apply(ctx, arguments);\r\n        obj.__webglDebugContextLostId__ = contextId_;\r\n        resourceDb_.push(obj);\r\n        return obj;\r\n      };\r\n    }(ctx[functionName]);\r\n  }\r\n\r\n  var functionsThatShouldReturnNull = [\r\n    \"getActiveAttrib\",\r\n    \"getActiveUniform\",\r\n    \"getBufferParameter\",\r\n    \"getContextAttributes\",\r\n    \"getAttachedShaders\",\r\n    \"getFramebufferAttachmentParameter\",\r\n    \"getParameter\",\r\n    \"getProgramParameter\",\r\n    \"getProgramInfoLog\",\r\n    \"getRenderbufferParameter\",\r\n    \"getShaderParameter\",\r\n    \"getShaderInfoLog\",\r\n    \"getShaderSource\",\r\n    \"getTexParameter\",\r\n    \"getUniform\",\r\n    \"getUniformLocation\",\r\n    \"getVertexAttrib\"\r\n  ];\r\n  for (var ii = 0; ii < functionsThatShouldReturnNull.length; ++ii) {\r\n    var functionName = functionsThatShouldReturnNull[ii];\r\n    wrapper_[functionName] = function(f) {\r\n      return function() {\r\n        if (contextLost_) {\r\n          return null;\r\n        }\r\n        return f.apply(ctx, arguments);\r\n      }\r\n    }(wrapper_[functionName]);\r\n  }\r\n\r\n  var isFunctions = [\r\n    \"isBuffer\",\r\n    \"isEnabled\",\r\n    \"isFramebuffer\",\r\n    \"isProgram\",\r\n    \"isRenderbuffer\",\r\n    \"isShader\",\r\n    \"isTexture\"\r\n  ];\r\n  for (var ii = 0; ii < isFunctions.length; ++ii) {\r\n    var functionName = isFunctions[ii];\r\n    wrapper_[functionName] = function(f) {\r\n      return function() {\r\n        if (contextLost_) {\r\n          return false;\r\n        }\r\n        return f.apply(ctx, arguments);\r\n      }\r\n    }(wrapper_[functionName]);\r\n  }\r\n\r\n  wrapper_.checkFramebufferStatus = function(f) {\r\n    return function() {\r\n      if (contextLost_) {\r\n        return ctx.FRAMEBUFFER_UNSUPPORTED;\r\n      }\r\n      return f.apply(ctx, arguments);\r\n    };\r\n  }(wrapper_.checkFramebufferStatus);\r\n\r\n  wrapper_.getAttribLocation = function(f) {\r\n    return function() {\r\n      if (contextLost_) {\r\n        return -1;\r\n      }\r\n      return f.apply(ctx, arguments);\r\n    };\r\n  }(wrapper_.getAttribLocation);\r\n\r\n  wrapper_.getVertexAttribOffset = function(f) {\r\n    return function() {\r\n      if (contextLost_) {\r\n        return 0;\r\n      }\r\n      return f.apply(ctx, arguments);\r\n    };\r\n  }(wrapper_.getVertexAttribOffset);\r\n\r\n  wrapper_.isContextLost = function() {\r\n    return contextLost_;\r\n  };\r\n\r\n  function wrapEvent(listener) {\r\n    if (typeof(listener) == \"function\") {\r\n      return listener;\r\n    } else {\r\n      return function(info) {\r\n        listener.handleEvent(info);\r\n      }\r\n    }\r\n  }\r\n\r\n  wrapper_.registerOnContextLostListener = function(listener) {\r\n    onLost_ = wrapEvent(listener);\r\n  };\r\n\r\n  wrapper_.registerOnContextRestoredListener = function(listener) {\r\n    if (contextLost_) {\r\n      nextOnRestored_ = wrapEvent(listener);\r\n    } else {\r\n      onRestored_ = wrapEvent(listener);\r\n    }\r\n  }\r\n\r\n  return wrapper_;\r\n}\r\n\r\nreturn {\r\n  /**\r\n   * Initializes this module. Safe to call more than once.\r\n   * @param {!WebGLRenderingContext} ctx A WebGL context. If\r\n   *    you have more than one context it doesn't matter which one\r\n   *    you pass in, it is only used to pull out constants.\r\n   */\r\n  'init': init,\r\n\r\n  /**\r\n   * Returns true or false if value matches any WebGL enum\r\n   * @param {*} value Value to check if it might be an enum.\r\n   * @return {boolean} True if value matches one of the WebGL defined enums\r\n   */\r\n  'mightBeEnum': mightBeEnum,\r\n\r\n  /**\r\n   * Gets an string version of an WebGL enum.\r\n   *\r\n   * Example:\r\n   *   WebGLDebugUtil.init(ctx);\r\n   *   var str = WebGLDebugUtil.glEnumToString(ctx.getError());\r\n   *\r\n   * @param {number} value Value to return an enum for\r\n   * @return {string} The string version of the enum.\r\n   */\r\n  'glEnumToString': glEnumToString,\r\n\r\n  /**\r\n   * Converts the argument of a WebGL function to a string.\r\n   * Attempts to convert enum arguments to strings.\r\n   *\r\n   * Example:\r\n   *   WebGLDebugUtil.init(ctx);\r\n   *   var str = WebGLDebugUtil.glFunctionArgToString('bindTexture', 0, gl.TEXTURE_2D);\r\n   *\r\n   * would return 'TEXTURE_2D'\r\n   *\r\n   * @param {string} functionName the name of the WebGL function.\r\n   * @param {number} argumentIndx the index of the argument.\r\n   * @param {*} value The value of the argument.\r\n   * @return {string} The value as a string.\r\n   */\r\n  'glFunctionArgToString': glFunctionArgToString,\r\n\r\n  /**\r\n   * Given a WebGL context returns a wrapped context that calls\r\n   * gl.getError after every command and calls a function if the\r\n   * result is not NO_ERROR.\r\n   *\r\n   * You can supply your own function if you want. For example, if you'd like\r\n   * an exception thrown on any GL error you could do this\r\n   *\r\n   *    function throwOnGLError(err, funcName, args) {\r\n   *      throw WebGLDebugUtils.glEnumToString(err) + \" was caused by call to\" +\r\n   *            funcName;\r\n   *    };\r\n   *\r\n   *    ctx = WebGLDebugUtils.makeDebugContext(\r\n   *        canvas.getContext(\"webgl\"), throwOnGLError);\r\n   *\r\n   * @param {!WebGLRenderingContext} ctx The webgl context to wrap.\r\n   * @param {!function(err, funcName, args): void} opt_onErrorFunc The function\r\n   *     to call when gl.getError returns an error. If not specified the default\r\n   *     function calls console.log with a message.\r\n   */\r\n  'makeDebugContext': makeDebugContext,\r\n\r\n  /**\r\n   * Given a WebGL context returns a wrapped context that adds 4\r\n   * functions.\r\n   *\r\n   * ctx.loseContext:\r\n   *   simulates a lost context event.\r\n   *\r\n   * ctx.restoreContext:\r\n   *   simulates the context being restored.\r\n   *\r\n   * ctx.registerOnContextLostListener(listener):\r\n   *   lets you register a listener for context lost. Use instead\r\n   *   of addEventListener('webglcontextlostevent', listener);\r\n   *\r\n   * ctx.registerOnContextRestoredListener(listener):\r\n   *   lets you register a listener for context restored. Use\r\n   *   instead of addEventListener('webglcontextrestored',\r\n   *   listener);\r\n   *\r\n   * @param {!WebGLRenderingContext} ctx The webgl context to wrap.\r\n   */\r\n  'makeLostContextSimulatingContext': makeLostContextSimulatingContext,\r\n\r\n  /**\r\n   * Resets a context to the initial state.\r\n   * @param {!WebGLRenderingContext} ctx The webgl context to\r\n   *     reset.\r\n   */\r\n  'resetToInitialState': resetToInitialState\r\n};\r\n\r\n}();\r\n\r\n\n\n//# sourceURL=webpack://webgl-guide/./lib/webgl-debug.js?");

/***/ }),

/***/ "./lib/webgl-utils.js":
/*!****************************!*\
  !*** ./lib/webgl-utils.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright 2010, Google Inc.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are\r\n * met:\r\n *\r\n *     * Redistributions of source code must retain the above copyright\r\n * notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above\r\n * copyright notice, this list of conditions and the following disclaimer\r\n * in the documentation and/or other materials provided with the\r\n * distribution.\r\n *     * Neither the name of Google Inc. nor the names of its\r\n * contributors may be used to endorse or promote products derived from\r\n * this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n\r\n/**\r\n * @fileoverview This file contains functions every webgl program will need\r\n * a version of one way or another.\r\n *\r\n * Instead of setting up a context manually it is recommended to\r\n * use. This will check for success or failure. On failure it\r\n * will attempt to present an approriate message to the user.\r\n *\r\n *       gl = WebGLUtils.setupWebGL(canvas);\r\n *\r\n * For animated WebGL apps use of setTimeout or setInterval are\r\n * discouraged. It is recommended you structure your rendering\r\n * loop like this.\r\n *\r\n *       function render() {\r\n *         window.requestAnimationFrame(render, canvas);\r\n *\r\n *         // do rendering\r\n *         ...\r\n *       }\r\n *       render();\r\n *\r\n * This will call your rendering function up to the refresh rate\r\n * of your display but will stop rendering if your app is not\r\n * visible.\r\n */\r\n\r\n__webpack_require__.g.WebGLUtils = function() {\r\n\r\n/**\r\n * Creates the HTLM for a failure message\r\n * @param {string} canvasContainerId id of container of th\r\n *        canvas.\r\n * @return {string} The html.\r\n */\r\nvar makeFailHTML = function(msg) {\r\n  return '' +\r\n        '<div style=\"margin: auto; width:500px;z-index:10000;margin-top:20em;text-align:center;\">' + msg + '</div>';\r\n  return '' +\r\n    '<table style=\"background-color: #8CE; width: 100%; height: 100%;\"><tr>' +\r\n    '<td align=\"center\">' +\r\n    '<div style=\"display: table-cell; vertical-align: middle;\">' +\r\n    '<div style=\"\">' + msg + '</div>' +\r\n    '</div>' +\r\n    '</td></tr></table>';\r\n};\r\n\r\n/**\r\n * Mesasge for getting a webgl browser\r\n * @type {string}\r\n */\r\nvar GET_A_WEBGL_BROWSER = '' +\r\n  'This page requires a browser that supports WebGL.<br/>' +\r\n  '<a href=\"http://get.webgl.org\">Click here to upgrade your browser.</a>';\r\n\r\n/**\r\n * Mesasge for need better hardware\r\n * @type {string}\r\n */\r\nvar OTHER_PROBLEM = '' +\r\n  \"It doesn't appear your computer can support WebGL.<br/>\" +\r\n  '<a href=\"http://get.webgl.org\">Click here for more information.</a>';\r\n\r\n/**\r\n * Creates a webgl context. If creation fails it will\r\n * change the contents of the container of the <canvas>\r\n * tag to an error message with the correct links for WebGL.\r\n * @param {Element} canvas. The canvas element to create a\r\n *     context from.\r\n * @param {WebGLContextCreationAttirbutes} opt_attribs Any\r\n *     creation attributes you want to pass in.\r\n * @param {function:(msg)} opt_onError An function to call\r\n *     if there is an error during creation.\r\n * @return {WebGLRenderingContext} The created context.\r\n */\r\nvar setupWebGL = function(canvas, opt_attribs, opt_onError) {\r\n  function handleCreationError(msg) {\r\n      var container = document.getElementsByTagName(\"body\")[0];\r\n    //var container = canvas.parentNode;\r\n    if (container) {\r\n      var str = window.WebGLRenderingContext ?\r\n           OTHER_PROBLEM :\r\n           GET_A_WEBGL_BROWSER;\r\n      if (msg) {\r\n        str += \"<br/><br/>Status: \" + msg;\r\n      }\r\n      container.innerHTML = makeFailHTML(str);\r\n    }\r\n  };\r\n\r\n  opt_onError = opt_onError || handleCreationError;\r\n\r\n  if (canvas.addEventListener) {\r\n    canvas.addEventListener(\"webglcontextcreationerror\", function(event) {\r\n          opt_onError(event.statusMessage);\r\n        }, false);\r\n  }\r\n  var context = create3DContext(canvas, opt_attribs);\r\n  if (!context) {\r\n    if (!window.WebGLRenderingContext) {\r\n      opt_onError(\"\");\r\n    } else {\r\n      opt_onError(\"\");\r\n    }\r\n  }\r\n\r\n  return context;\r\n};\r\n\r\n/**\r\n * Creates a webgl context.\r\n * @param {!Canvas} canvas The canvas tag to get context\r\n *     from. If one is not passed in one will be created.\r\n * @return {!WebGLContext} The created context.\r\n */\r\nvar create3DContext = function(canvas, opt_attribs) {\r\n  var names = [\"webgl\", \"experimental-webgl\", \"webkit-3d\", \"moz-webgl\"];\r\n  var context = null;\r\n  for (var ii = 0; ii < names.length; ++ii) {\r\n    try {\r\n      context = canvas.getContext(names[ii], opt_attribs);\r\n    } catch(e) {}\r\n    if (context) {\r\n      break;\r\n    }\r\n  }\r\n  return context;\r\n}\r\n\r\nreturn {\r\n  create3DContext: create3DContext,\r\n  setupWebGL: setupWebGL\r\n};\r\n}();\r\n\r\n/**\r\n * Provides requestAnimationFrame in a cross browser\r\n * way.\r\n */\r\nif (!window.requestAnimationFrame) {\r\n  window.requestAnimationFrame = (function() {\r\n    return window.requestAnimationFrame ||\r\n           window.webkitRequestAnimationFrame ||\r\n           window.mozRequestAnimationFrame ||\r\n           window.oRequestAnimationFrame ||\r\n           window.msRequestAnimationFrame ||\r\n           function(/* function FrameRequestCallback */ callback, /* DOMElement Element */ element) {\r\n             window.setTimeout(callback, 1000/60);\r\n           };\r\n  })();\r\n}\r\n\r\n/** * ERRATA: 'cancelRequestAnimationFrame' renamed to 'cancelAnimationFrame' to reflect an update to the W3C Animation-Timing Spec. \r\n * \r\n * Cancels an animation frame request. \r\n * Checks for cross-browser support, falls back to clearTimeout. \r\n * @param {number}  Animation frame request. */\r\nif (!window.cancelAnimationFrame) {\r\n  window.cancelAnimationFrame = (window.cancelRequestAnimationFrame ||\r\n                                 window.webkitCancelAnimationFrame || window.webkitCancelRequestAnimationFrame ||\r\n                                 window.mozCancelAnimationFrame || window.mozCancelRequestAnimationFrame ||\r\n                                 window.msCancelAnimationFrame || window.msCancelRequestAnimationFrame ||\r\n                                 window.oCancelAnimationFrame || window.oCancelRequestAnimationFrame ||\r\n                                 window.clearTimeout);\r\n}\n\n//# sourceURL=webpack://webgl-guide/./lib/webgl-utils.js?");

/***/ }),

/***/ "./earth/earth.frag":
/*!**************************!*\
  !*** ./earth/earth.frag ***!
  \**************************/
/***/ ((module) => {

"use strict";
eval("module.exports = \"#ifdef GL_ES\\r\\nprecision mediump float;\\r\\n#endif\\r\\nuniform sampler2D u_Sampler;\\r\\nvarying vec2 v_TexCoord;\\r\\nvoid main() {\\r\\n  gl_FragColor = texture2D(u_Sampler, v_TexCoord);\\r\\n}\\r\\n\";\n\n//# sourceURL=webpack://webgl-guide/./earth/earth.frag?");

/***/ }),

/***/ "./earth/earth.vert":
/*!**************************!*\
  !*** ./earth/earth.vert ***!
  \**************************/
/***/ ((module) => {

"use strict";
eval("module.exports = \"uniform mat4 u_ModelMatrix;\\r\\nattribute vec4 a_Position;\\r\\nattribute vec2 a_TexCoord;\\r\\nvarying vec2 v_TexCoord;\\r\\nvoid main() {\\r\\n  gl_Position = u_ModelMatrix * a_Position;\\r\\n  v_TexCoord = a_TexCoord;\\r\\n}\\r\\n\";\n\n//# sourceURL=webpack://webgl-guide/./earth/earth.vert?");

/***/ }),

/***/ "./earth/earth.jpg":
/*!*************************!*\
  !*** ./earth/earth.jpg ***!
  \*************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("module.exports = __webpack_require__.p + \"ec69876e25f951c6f0ca.jpg\";\n\n//# sourceURL=webpack://webgl-guide/./earth/earth.jpg?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./index.js");
/******/ 	
/******/ })()
;